import asyncio
import os
import sys
import logging
import traceback

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import markdown

import interactor
import matplotlib
import re

import config


logging.basicConfig(level=logging.INFO)

if len(sys.argv) > 1:
    API_TOKEN = config.read_config(sys.argv[1])["bot_api"]
    config.config = config.read_config(sys.argv[1])
else:
    API_TOKEN = config.config["bot_api"]

import bot_data_handler
import inline_keyboard_manager

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    table_name = State()  
    description = State()
    context = State()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    print("processing")
    first_time = await bot_data_handler.make_insertion(message.chat.id)

    if first_time:

        await help_info(message)
        
    text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"), 
        types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"),
    )
    markup.add(
        types.KeyboardButton("‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        types.KeyboardButton("–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü")  
    )
    await message.reply(text, reply_markup=markup)


@dp.message_handler(commands=['help'])
async def help_info(message: types.Message):
    await message.reply("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è""")
    
    help_text = """
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –¢–∞–±–ª–∏—Ü—É' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü"""

    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN)
    
    example = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'"
    await message.reply(example)
    
    instructions = """
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:
1) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π
2) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞
4) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await message.reply(instructions)
    
    trouble = "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '/start'"
    await message.reply(trouble)


@dp.message_handler(Text(equals="üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"))
async def select_table(message: types.Message):

    await Form.table_name.set()
    markup = await create_inline_keyboard(message.chat.id, "table_page")

    await message.reply("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", reply_markup=markup)


@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def add_description(message: types.Message):
    await Form.description.set()

    markup = await create_inline_keyboard(message.chat.id, "description_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)


@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def add_description(message: types.Message):
    await Form.description.set()

    markup = await bot_data_handler.create_inline_keyboard(message.chat.id, "description_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)


@dp.message_handler(Text(equals="üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"))
async def toggle_plots(message: types.Message):
    text = await bot_data_handler.set_plots(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.reply(text, reply_markup=markup)


@dp.message_handler(Text(equals="‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"))
async def request_mode(message: types.Message):
    #await call_to_model(message.chat.id)
    pass

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üö´ exit"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Äo—Å. –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è",
                        reply_markup=markup)


@dp.message_handler(Text(equals="–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü"))
async def group_options(message: types.Message):
    markup = await inline_keyboard_manager.create_group_keyboard(message.chat.id)
    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é", reply_markup=markup)

@dp.message_handler()
async def create_inline_keyboard(chat_id, page_type, page=1, group_mode=False):
    print("start")
    keyboard_types = ["table_page", "description_page", "context_page"]
    if not page_type not in keyboard_types:
        raise ValueError("Invalid page type")
    print("HU")
    return await inline_keyboard_manager.inline_keyboard(chat_id=chat_id, page_type=page_type, page=page,
                                                         status_flag=False)

if __name__ == '__main__':

    executor.start_polling(dp, skip_updates=True)
