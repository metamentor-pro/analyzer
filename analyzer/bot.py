import os
import sys
import logging
import traceback

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import markdown

import interactor
import matplotlib
import re

import config
import bot_data_handler

logging.basicConfig(level=logging.INFO)

API_TOKEN = config.read_config(sys.argv[1])["bot_api"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    table_name = State()  
    description = State()
    context = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    first_time = await bot_data_handler.make_insertion(message.chat.id)
    if first_time:
        await help_info(message)
        
    text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"), 
        types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"),
    )
    markup.add(
        types.KeyboardButton("‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        types.KeyboardButton("–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü")  
    )
    await message.reply(text, reply_markup=markup)


async def help_info(message: types.Message):
    await message.reply("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è""")
    
    help_text = """
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –¢–∞–±–ª–∏—Ü—É' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü"""

    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN)
    
    example = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'"
    await message.reply(example)
    
    instructions = """
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:
1) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π
2) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞
4) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await message.reply(instructions)
    
    trouble = "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '/start'"
    await message.reply(trouble)

    
@dp.message_handler(Text(equals="üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"))  
async def select_table(message: types.Message):
    await Form.table_name.set()
    markup = await bot_data_handler.create_inline_keyboard(message.chat.id, "table_page") 

    await message.reply("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", reply_markup=markup)

    
@dp.callback_query_handler(Text(startswith="t|"), state=Form.table_name)
async def choose_table(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    
    if action == "new_table":
        await call.message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv, XLSX –∏–ª–∏ json")
        await Form.table_name.set()
        
    elif action == "delete_tables":
        tables = await bot_data_handler.delete_last_table(call.message.chat.id)
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {tables[-1]} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        
    elif action in ("right", "left"):  
        page = await bot_data_handler.change_page(call.message.chat.id, "table_page", action)
        markup = await bot_data_handler.create_inline_keyboard(call.message.chat.id, 
                                                              "table_page", page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", 
                                     reply_markup=markup)
                                     
    else:
        await bot_data_handler.choose_table(call.data, call.message)
        await call.message.answer("–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞")
        await state.finish()
        
    await bot.answer_callback_query(call.id)

    
@dp.message_handler(content_types=['document'], state=Form.table_name)
async def load_table(message: types.Message):
    await bot_data_handler.add_table(message)
    await message.reply("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await state.finish()

    
@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def add_description(message: types.Message):
    await Form.description.set()
    
    markup = await bot_data_handler.create_inline_keyboard(message.chat.id, "description_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)

    
@dp.callback_query_handler(Text(startswith="d|"), state=Form.description)  
async def choose_description(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    
    if action in ("right", "left"):
        page = await bot_data_handler.change_page(call.message.chat.id, "description_page", action)
        markup = await bot_data_handler.create_inline_keyboard(call.message.chat.id, 
                                                              "description_page", page)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è", reply_markup=markup)
        
    elif action == "exit":
        await call.message.delete()
        await state.finish()
        
    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt")
        await Form.next()
        await bot.answer_callback_query(call.id)

        
@dp.message_handler(content_types=['text', 'document'], state=Form.description)
async def save_description(message: types.Message):
    table_name = message.text
    await bot_data_handler.choose_description(message, table_name)
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await state.finish()

    
@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"))
async def add_context(message: types.Message):
    await Form.context.set()
    
    markup = await bot_data_handler.create_inline_keyboard(message.chat.id, "context_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", reply_markup=markup)

    
@dp.callback_query_handler(Text(startswith="c|"), state=Form.context)
async def choose_context(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    
    if action in ("right", "left"):
        page = await bot_data_handler.change_page(call.message.chat.id, "context_page", action)
        markup = await bot_data_handler.create_inline_keyboard(call.message.chat.id, 
                                                              "context_page", page)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", reply_markup=markup)
        
    elif action == "exit":
        await call.message.delete()
        await state.finish()
        
    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt") 
        await Form.next()
        await bot.answer_callback_query(call.id)

        
@dp.message_handler(content_types=['text', 'document'], state=Form.context)  
async def save_context(message: types.Message):
    table_name = message.text
    await bot_data_handler.add_context(message, table_name)
    await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await state.finish()

    
@dp.message_handler(Text(equals="üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"))
async def toggle_plots(message: types.Message):
    text = await bot_data_handler.set_plots(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))  
    await message.reply(text, reply_markup=markup)

    
@dp.message_handler(Text(equals="‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"))
async def request_mode(message: types.Message):
    await bot_data_handler.set_request_mode(message.chat.id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üö´ exit"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Äo—Å. –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è",
                        reply_markup=markup)
    
    
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())

    
@dp.message_handler(state=bot_data_handler.RequestForm.request)
async def call_model(message: types.Message, state: FSMContext):
    if message.text == "üö´ exit":
        await bot_data_handler.exit_request_mode(message.chat.id)
        await state.finish()
        await start_command(message)
        
    else:
        await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        summary = await bot_data_handler.get_summary(message.chat.id)
        answer, new_summary = await bot_data_handler.query_model(message.text, message.chat.id, summary)
        
        await state.update_data(answer=answer)
        
        if ".png" in answer:
            pattern = r"[\w.-]+\.png"
            plot_files = re.findall(pattern, answer)
            for plot in plot_files:
                try:
                    await message.answer_photo(open(f"Plots/{plot}", 'rb'))
                except Exception:
                    pass
            
            matplotlib.pyplot.close('all')
            
        await message.reply(f"–û—Ç–≤–µ—Ç: {answer}")
        await bot_data_handler.update_summary(message.chat.id, new_summary)
        
        await Form.request.set()
        

@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")
    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
</file-attachment-contents>

<file-attachment-contents filename="bot_data_handler.py">
import aiosqlite

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram import types

import interactor
import config

db_name = config.read_config("config.yaml")["db_name"] 

class RequestForm(StatesGroup):
    request = State()
    
    
async def make_insertion(user_id: int) -> bool:
    async with aiosqlite.connect(db_name) as db:
        await db.execute("CREATE TABLE IF NOT EXISTS users"
                         "(user_id INTEGER PRIMARY KEY,"
                         "conv_sum TEXT,"
                         "current_tables VARCHAR,"
                         "build_plots INTEGER DEFAULT 1)")
                         
        await db.execute("CREATE TABLE IF NOT EXISTS callback_manager"
                         "(user_id INTEGER PRIMARY KEY,"
                         "table_page INTEGER DEFAULT 1,"
                         "context_page INTEGER DEFAULT 1,"
                         "description_page INTEGER DEFAULT 1,"
                         "group_flag INTEGER DEFAULT 0,"
                         "group_name VARCHAR)")
                         
        insertion = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        result = await insertion.fetchone()
        
        if result is None:
            await db.execute("INSERT INTO users(user_id) VALUES (?)", (user_id,))
            await db.commit()
            return True
        
    return False
    
    
async def create_inline_keyboard(chat_id, page_type, page=1, group_mode=False):
    keyboard_types = {
        "table_page": await get_tables_keyboard,
        "context_page": await get_context_keyboard,
        "description_page": await get_description_keyboard
    }
    
    create_keyboard = keyboard_types.get(page_type)
    if not create_keyboard:
        raise ValueError("Invalid page type")
        
    return await create_keyboard(chat_id, page, group_mode)

    
async def get_tables_keyboard(chat_id, page, group_mode):
    tables = await get_table_names(chat_id)
    
    if not tables:
        tables_text = "–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" 
    else:
        tables_per_page = 3
        total_pages = len(tables) // tables_per_page + 1
        tables_text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é"
        
        if page > total_pages:
            page = total_pages
            
        start_index = (page - 1) * tables_per_page
        end_index = page * tables_per_page
            
        tables = tables[start_index:end_index]
            
    markup = types.InlineKeyboardMarkup()
            
    for table in tables:
        markup.insert(types.InlineKeyboardButton(table, callback_data=f"t|{table}")) 
        
    markup.row(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="t|new_table"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="t|delete_tables")
    )
    
    if total_pages > 1:
        markup.row(
            types.InlineKeyboardButton("<", callback_data=f"t|left"),
            types.InlineKeyboardButton(">", callback_data=f"t|right")
        )
        
    markup.insert(types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="t|exit"))
    
    return markup

    
async def get_context_keyboard(chat_id, page, group_mode):
    tables = await get_table_names(chat_id, group_mode)
    
    if not tables:
        tables_text = "–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        tables_per_page = 3
        total_pages = len(tables) // tables_per_page + 1
        tables_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        
        if page > total_pages:
            page = total_pages
            
        start_index = (page - 1) * tables_per_page
        end_index = page * tables_per_page
            
        tables = tables[start_index:end_index]
            
    markup = types.InlineKeyboardMarkup()
            
    for table in tables:
        markup.insert(types.InlineKeyboardButton(table, callback_data=f"c|{table}"))

    if total_pages > 1:
        markup.row(
            types.InlineKeyboardButton("<", callback_data=f"c|left"), 
            types.InlineKeyboardButton(">", callback_data=f"c|right")
        )
        
    markup.insert(types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="c|exit"))
    
    return markup

@dp.callback_query_handler(Text(startswith="g|"))
async def group_actions(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    
    if action == "exit":
        await bot_data_handler.exit_group_mode(call.message.chat.id)
        await call.message.delete()
        
    elif action == "create_group":
        await call.message.answer("–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–µ")
        await GroupForm.group_name.set()
        
    elif action == "choose_group":
        markup = await bot_data_handler.create_group_keyboard(call.message.chat.id, show_groups=True)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=markup)
        
    elif action == "back":
        markup = await bot_data_handler.create_group_keyboard(call.message.chat.id)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é", reply_markup=markup)
        
    else:
        await bot_data_handler.choose_group(action, call.message.chat.id, call.message)
        await call.message.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥—Ä—É–ø–ø–µ {action}")
    
    await bot.answer_callback_query(call.id)

    
class GroupForm(StatesGroup):
    group_name = State()

    
@dp.message_handler(state=GroupForm.group_name)  
async def create_group(message: types.Message, state: FSMContext):
    await bot_data_handler.create_group(message.text, message.chat.id)
    await message.reply("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞")
    await state.finish()

    
@dp.message_handler(Text(equals="–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü"))
async def group_options(message: types.Message):
    markup = await bot_data_handler.create_group_keyboard(message.chat.id)
    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é", reply_markup=markup)

    
@dp.message_handler(Text(equals="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã"))  
async def save_group(message: types.Message):
    link = await bot_data_handler.save_group_settings(message.chat.id)
    await message.reply("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    await message.reply(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {link}")

    
@dp.message_handler(Text(equals="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def list_tables(message: types.Message):
    tables = await bot_data_handler.get_table_names(message.chat.id, group_mode=True)
    if not tables:
        await message.reply("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü") 
    else:
        await message.reply(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")


@dp.message_handler(Text(equals="exit"))  
async def exit_group_mode(message: types.Message):
    await bot_data_handler.exit_group_mode(message.chat.id)
    await start_command(message)
    await message.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    
@dp.message_handler(state='*')
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

        
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

