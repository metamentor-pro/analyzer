import asyncio
import os
import sys
import time
import requests
import logging
import traceback
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import markdown
import aiosqlite

import interactor
import matplotlib
import re

import config


logging.basicConfig(level=logging.INFO)

if len(sys.argv) > 1:
    API_TOKEN = config.read_config(sys.argv[1])["bot_api"]
    config.config = config.read_config(sys.argv[1])
else:
    API_TOKEN = config.config["bot_api"]
    db_name = config.config["db_name"]

import bot_data_handler
import inline_keyboard_manager
import db_manager

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    start = State()
    working = State()
    load_table = State()
    choose_table = State()
    description = State()
    context = State()
    plot = State()
    request = State()
    question = State()


class GroupForm(StatesGroup):
    group_callback = State()
    group_menu = State()
    choose_group = State()
    create_group = State()


data_keys = {
    Form.load_table: "call_message_id"
}


@dp.message_handler(commands=["start"], state="*")
@dp.message_handler(state=[Form.start, None])
async def main_menu(message: types.Message, state: FSMContext):
    first_time = await bot_data_handler.make_insertion(message.chat.id)
    if first_time:
        await help_info(message)
    text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"), 
        types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"),
    )
    markup.add(
        types.KeyboardButton("‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        types.KeyboardButton("–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü")  
    )

    await message.reply(text, reply_markup=markup)
    await Form.working.set()


@dp.message_handler(commands=['help'])
async def help_info(message: types.Message):
    await message.reply("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è""")
    
    help_text = """
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –¢–∞–±–ª–∏—Ü—É' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü"""

    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN)
    
    example = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'"
    await message.reply(example)
    
    instructions = """
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:
1) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π
2) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞
4) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await message.reply(instructions)
    
    trouble = "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É 'start'"
    await message.reply(trouble)


@dp.message_handler(Text(equals="üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"), state="*")
async def select_table(message: types.Message):
    markup = await create_inline_keyboard(message.chat.id, "table_page")
    await message.reply("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", reply_markup=markup)


@dp.callback_query_handler(lambda query: query.data.startswith('t|'), state="*")
async def callback_query(call: types.CallbackQuery, state: FSMContext) -> None:
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id
    if action == "new_table":
        await call.message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv, XLSX –∏–ª–∏ json")
        await Form.load_table.set()
        await state.update_data({'message_id': call.message.message_id})

    elif action == "delete_tables":
        tables = await bot_data_handler.delete_last_table(call.message.chat.id)
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {tables[-1]} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")

    elif action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id,)
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="table_page")
        new_page = page
        print(page)
        if page < amount:
            if action == "right":
                new_page = page + 1
        elif page > 1:
            new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "table_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id,"table_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)
    elif action == "exit":
        await call.message.delete()
        await state.finish()
    else:
        await choose_table(call.data)
        await call.message.answer("–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞")
    await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['document'], state=Form.load_table)
async def load_table(message: types.Message, state: FSMContext):

    chat_id = message.chat.id
    message = message
    data = await state.get_data()
    message_id = data.get("message_id")
    group_name = await db_manager.check_group_design(chat_id)
    if group_name is not None:
        group_id = await db_manager.get_group_id(group_name, chat_id)

    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        downloaded_file = await bot.download_file_by_id(file.file_id)
        if len(message.document.file_name) > 40:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–∏–¥—ë—Ç—Å—è –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å")

        else:
            message.document.file_name = str(chat_id) + "_" + message.document.file_name
            if group_name is not None:
                async with aiosqlite.connect(db_name) as con:
                    existing_record = await con.execute(
                        """SELECT * FROM group_tables WHERE admin_id == ? AND table_name == ? and group_id and group_id == ?""",
                    (chat_id, message.document.file_name, group_id))
                existing_record = await existing_record.fetchone()

                if existing_record is None:
                    await db_manager.add_table(message=message, downloaded_file=downloaded_file)
                    await message.reply('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
                    page_type = "table_page"
                    markup2 = await create_inline_keyboard(chat_id=chat_id, page_type=page_type)
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                              text="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                              reply_markup=markup2)
                    await GroupForm.group_menu.set()
                else:
                    await bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é")

            else:
                async with aiosqlite.connect(db_name) as con:
                    existing_record = await con.execute("SELECT * FROM tables WHERE user_id == ? AND table_name == ?",
                            (chat_id, message.document.file_name))
                    existing_record = await existing_record.fetchone()
                    if existing_record is None:
                        await db_manager.add_table(message=message, downloaded_file=downloaded_file)
                        await message.reply('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
                        page_type = "table_page"
                        markup2 = await create_inline_keyboard(chat_id=chat_id, page_type=page_type)
                        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                              text="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                              reply_markup=markup2)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        btn1 = types.KeyboardButton("–ù–µ—Ç")
                        btn2 = types.KeyboardButton("–î–∞")
                        markup.row(btn2, btn1)
                        await bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∞–±–ª–∏—Ü–µ?",
                                         reply_markup=markup)
                        await Form.question.set()
                    else:
                        await bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é")
                        await Form.question.set()
    except Exception as e:
        print(e)
        await bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
        print(traceback.format_exc())
        print("error is:", e)
        logging.error(traceback.format_exc())
        await Form.question.set()


@dp.message_handler(state=Form.choose_table)
async def choose_table(call: types.callback_query, state: FSMContext):
    try:
        chat_id = call.message.chat.id
        text = call.data
        message = call.message
    except Exception as e:
        print(e)
        chat_id = call.chat.id
        text = call.text
        message = call

    settings = await db_manager.get_settings(chat_id)
    if settings["table_name"] is not None and len(settings["table_name"]) != 0:
        if text not in settings["table_name"]:
            settings["table_name"] += ", " + text
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            await message.answer("–î–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫")
    else:
        settings["table_name"] = text
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞.")
    await db_manager.update_table(chat_id=chat_id, settings=settings)


@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"), state="*")
async def add_description(message: types.Message, state: FSMContext):
    markup = await create_inline_keyboard(message.chat.id, "context_page")

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)
    await main_menu(message)


@dp.callback_query_handler(Text(startswith="c|"), state="*")
async def callback_query(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id

    if action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id,)
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="context_page")
        new_page = page
        if page < amount:
            if action == "right":
                new_page = page + 1
        elif page > 1:
            new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "context_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id, "context_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)

    elif action == "exit":
        await call.message.delete()
        await state.finish()

    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt")
        await Form.context.set()
        await state.update_data({"table_name": call.data})
    await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['text', 'document'], state=Form.context)
async def save_context(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    try:
        data = await state.get_data()
        table_name = data.get("table_name")
        group_name = await db_manager.check_group_design(chat_id)
        if message.content_type == "text":
            await db_manager.add_context(message=message, table_name=table_name)
            if group_name is not None:
                await group_main_menu(message, state)
            else:
                await main_menu(message, state)
            await bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        elif message.content_type == "document":
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            downloaded_file = await bot.download_file_by_id(file.file_id)
            await db_manager.add_context(message=message, table_name=table_name, downloaded_file=downloaded_file)
            if group_name is not None:
                await group_main_menu(message, state)
            else:
                await main_menu(message, state)
            await bot.send_message(chat_id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    except Exception as e:
        print(e)
        await bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
        print(traceback.format_exc())
        print("error is:", e)
        logging.error(traceback.format_exc())
        await Form.question.set()


@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"), state="*")
async def description(message: types.Message, state: FSMContext):
    markup = await create_inline_keyboard(message.chat.id, "description_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)


@dp.callback_query_handler(Text(startswith="d|"), state="*")
async def callback_query(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id
    if action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id, )
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="description_page")
        new_page = page
        if page < amount:
            if action == "right":
                new_page = page + 1
        elif page > 1:
            new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "description_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id, "description_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)
    elif action == "exit":
        await call.message.delete()
        await state.finish()

    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        await Form.description.set()
        await state.update_data({'table_name': call.data})
    await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['text', 'document'], state=Form.description)
async def save_description(message: types.Message, state: FSMContext):

    chat_id = message.chat.id
    data = await state.get_data()
    table_name = data.get("message_id")
    try:
        table_name = table_name
        group_name = await db_manager.check_group_design(chat_id)
        if message.content_type == "text":
            await db_manager.choose_description_db(message=message, table_name=table_name)
            if group_name is not None:
                await group_main_menu(message, state)
            else:
                await main_menu(message, state)
            await bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        elif message.content_type == "document":
            file_id = message.document.file_id
            file = await bot.get_file(file_id)
            downloaded_file = await bot.download_file_by_id(file.file_id)
            await db_manager.choose_description_db(message=message, table_name=table_name, downloaded_file=downloaded_file)
            if group_name is not None:
                await group_main_menu(message, state)
            else:
                await main_menu(message, state)
            await bot.send_message(chat_id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    except Exception as e:
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
        print(traceback.format_exc())
        print("error is:", e)
        logging.error(traceback.format_exc())
        await Form.question.set()




@dp.message_handler(Text(equals="üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"), state="*")
async def plot_on_click(message: types.Message, state: FSMContext) -> None:
    chat_id = message.chat.id
    settings = await db_manager.get_settings(chat_id)
    if settings["build_plots"] == 0:
        build_plots = "–≤—ã–∫–ª—é—á–µ–Ω"
    else:
        build_plots = "–≤–∫–ª—é—á–µ–Ω"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å")
    btn2 = types.KeyboardButton("–í–∫–ª—é—á–∏—Ç—å")
    markup.row(btn1, btn2)
    await bot.send_message(chat_id, f"–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω  {build_plots}  –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                     reply_markup=markup)
    await Form.plot.set()


@dp.message_handler(state=Form.plot)
async def plots_handler(message: types.Message, state: FSMContext) -> None:
    chat_id = message.chat.id
    group_name = await db_manager.check_group_design(chat_id)
    text = await bot_data_handler.set_plots(message)
    await message.answer(text)
    await state.finish()
    if group_name is not None:
        await group_main_menu(message, state)
    else:
        await main_menu(message, state)



@dp.message_handler(Text(equals="‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"), state="*")
async def request_mode(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üö´ exit"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Äo—Å. –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è",
                        reply_markup=markup)
    await Form.question.set()


@dp.message_handler(Text(equals="–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü"), state="*")
async def group_options(message: types.Message, state: FSMContext):
    markup = await inline_keyboard_manager.create_group_keyboard(message.chat.id)
    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é", reply_markup=markup)


@dp.message_handler(state=GroupForm.group_menu)
async def group_main_menu(message: types.Message, state: FSMContext) -> None:
    chat_id = message.chat.id
    group_name = await db_manager.check_group_design(chat_id)
    async with aiosqlite.connect(db_name) as con:
        await con.execute("select * from groups")
        if message.text == "–ù–µ—Ç":
            await con.execute("UPDATE groups SET design_flag = False WHERE admin_id == ? AND group_name == ?", (chat_id, group_name))
            await con.commit()
            await main_menu(message, state)
        else:
            chat_id = message.chat.id
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            btn2 = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
            btn3 = types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            btn4 = types.KeyboardButton("exit")
            btn5 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            btn6 = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã")
            markup.row(btn1, btn2, btn3)
            markup.row(btn5, btn4, btn6)
            await bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ  –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π", reply_markup=markup)


@dp.callback_query_handler(Text(startswith="g|"), state='*')
async def callback_query(call) -> None:
    callback_type, action = map(str, call.data.split("|"))
    call.data = action
    chat_id = call.message.chat.id
    if call.data == "exit":
        await bot_data_handler.exit_from_group(chat_id=chat_id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "create_group":
        await bot.send_message(chat_id, "–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–µ")
        #bot.register_next_step_handler(call.message, create_group)
    elif call.data == "choose_group":
        markup = await inline_keyboard_manager.create_group_keyboard(chat_id=chat_id, show_groups=True)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
                              reply_markup=markup)
    elif call.data == "back":
        markup = await inline_keyboard_manager.create_group_keyboard(chat_id=chat_id, show_groups=False)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                              reply_markup=markup)
    else:
        await choose_group(group_name=call.data, admin_id=call.message.chat.id, message=call.message)
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=GroupForm.create_group)
async def create_group(message: types.Message, state: FSMContext) -> None:
    admin_id = message.chat.id
    group_name = message.text.replace(" ", "")
    group_name_for_link = "group_" + str(admin_id)
    text = await db_manager.create_group(admin_id=admin_id, group_name=group_name, group_name_for_link=group_name_for_link)
    await bot.send_message(admin_id, text)
    await main_menu(message, state)


@dp.message_handler(state=GroupForm.choose_group)
async def choose_group(group_name: str = None, admin_id: int = None, message=None) -> None:
    await db_manager.choose_group_db(admin_id=admin_id, group_name=group_name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.row(btn1, btn2)
    await bot.send_message(message.chat.id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã {group_name}?", reply_markup=markup)
    #bot.register_next_step_handler(message, group_main)


@dp.message_handler()
async def create_inline_keyboard(chat_id, page_type, page=1, group_mode=False):

    keyboard_types = ["table_page", "description_page", "context_page"]

    if page_type not in keyboard_types:
        raise ValueError("Invalid page type")

    return await inline_keyboard_manager.inline_keyboard(chat_id=chat_id, page_type=page_type, page=page,
                                                         status_flag=False)


@dp.message_handler(Text(equals="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def group_table_list(message: types.Message, state: FSMContext) -> None:
    chat_id = message.chat.id
    prepared_settings = await bot_data_handler.settings_prep(chat_id)
    if prepared_settings == False:
        await bot.send_message(chat_id, "–í –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    else:
        await bot.send_message(chat_id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {prepared_settings}")


@dp.message_handler(state=GroupForm.create_group)
async def create_group(message: types.Message, state: FSMContext):
    await db_manager.create_group(message.text, message.chat.id)
    await message.reply("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞")
    await state.finish()


@dp.message_handler(Text(equals="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã"))
async def save_group(message: types.Message):
    link = await bot_data_handler.save_group_settings(message.chat.id)
    await message.reply("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    await message.reply(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {link}")


@dp.message_handler(Text(equals="exit"))
async def exit_group_mode(message: types.Message):
    await bot_data_handler.exit_from_group(message.chat.id)
    await message.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


@dp.message_handler(state=Form.question)
async def call_to_model(message: types.Message, state: FSMContext):
    demo_status = await db_manager.check_for_demo(chat_id=message.chat.id)
    if demo_status is not None:
        pass
    if message.text == "üö´ exit":
        await bot_data_handler.exit_from_model(message.chat.id)
        await Form.start.set()
        await main_menu(message, state)

    elif message.text == "–ù–µ—Ç":
        await bot_data_handler.exit_from_model(message.chat.id)
        await Form.start.set()
        await main_menu(message, state)

    else:
        if message.text == "–î–∞":
            user_question = "–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–±–ª–∏—Ü–µ"
        else:
            user_question = message.text
        chat_id = message.chat.id

        async def callback(sum_on_step):
            message_id = send_message.message_id
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=send_message.text + f"\n{sum_on_step}")
        settings = await db_manager.get_settings(chat_id)
        try:
            if settings["table_name"] is None or settings["table_name"] == "":
                await message.answer("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ")
                markup = types.ReplyKeyboardMarkup()
                btn1 = types.KeyboardButton("üö´ exit")
                markup.add(btn1)
                await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                             reply_markup=markup)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton("üö´ exit")
                markup.add(btn1)
                await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                                 reply_markup=markup)
                await message.answer("–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Å–ø–∞—Å–∏–±–æ")
                send_message = await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π:")
                answer_from_model = await bot_data_handler.model_call(chat_id=chat_id, user_question=user_question,callback=callback)
                if answer_from_model[0] == "F":
                    await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å")
                    answer_from_model = await bot_data_handler.model_call(chat_id=chat_id, user_question=user_question,
                                                   callback=callback)
                    if answer_from_model[0] == "F":
                        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                current_summary = await bot_data_handler.get_summary(chat_id)
                summary = answer_from_model[1]
                await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
                new_summary = current_summary + summary
                print(summary)
                await db_manager.update_summary(chat_id, new_summary)
                time.sleep(10)
                pattern = r"\b\w+\.png\b"
                pattern2 = r"[\w.-]+\.png"
                if ".png" in answer_from_model[1]:
                    plot_files = re.findall(pattern, answer_from_model[1])
                    plot_files_2 = re.findall(pattern2, answer_from_model[1])
                    print("plot_files", plot_files, plot_files_2)
                    for plot_file in plot_files:
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            await message.answer_photo(open(path_to_file, "rb"))
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            os.remove(path_to_file)
                    for plot_file in plot_files_2:
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file) and path_to_file not in plot_files:
                            await message.answer_photo(open(path_to_file, "rb"))
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            os.remove(path_to_file)
                    matplotlib.pyplot.close("all")
                    await message.answer(f"Answer: {answer_from_model[0]}")
                else:
                    await message.answer(f"Answer: {answer_from_model[0]}")
                #bot.register_next_step_handler(message, call_to_model)
        except requests.exceptions.ConnectionError:
            await call_to_model(message)
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É start")


            #await message.reply(f"–û—Ç–≤–µ—Ç: {answer}")
            #await bot_data_handler.update_summary(message.chat.id, new_summary)

            #await Form.request.set()


async def main():
    # Your code to start the bot, setup handlers, etc.
    await dp.start_polling()

if __name__ == "__main__":
    # Run the main function inside the asyncio event loop
    asyncio.run(main())
