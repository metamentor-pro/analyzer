import os
import telebot
import sqlite3 as sq
import interactor
import time
import requests


import re
import yaml
import matplotlib
matplotlib.use('Agg')

from telebot import types
from msg_parser import msg_to_string

user_question = None

plot_files = ""


with open("config.yaml") as f:
    cfg = yaml.load(f, Loader=yaml.FullLoader)

bot_name = cfg["bot_name"]
bot_api = cfg["bot_api"]


class Bot(telebot.TeleBot):
    def __init__(self):
        self.name = bot_name
        super().__init__(bot_api)


bot = Bot()


@bot.message_handler(commands=["help"])
def help_info(message):
    bot.send_message(message.from_user.id, "–Ø - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@bot.message_handler(commands=["start", "exit"], content_types=["text", "document"])
def main(message, settings=None):
    user_id = message.from_user.id

    con = sq.connect("user_data.sql")
    cur = con.cursor()

    cur.execute("""CREATE TABLE IF NOT EXISTS users 
                (user_id INTEGER UNIQUE,
                conv_sum TEXT)""")
    con.commit()

    cur.execute("SELECT * FROM users WHERE user_id = '%s'" % (user_id,))
    existing_record = cur.fetchone()

    if not existing_record:
        cur.execute("""INSERT INTO users(user_id) values(?)""", (user_id,))

    cur.execute("SELECT * FROM users")

    print(cur.fetchall())

    con.commit()

    cur.execute(""" CREATE TABLE IF NOT EXISTS tables (user_id INTEGER, 
                table_name VARCHAR,
                table_description VARCHAR,
                context VARCHAR,
                FOREIGN KEY(user_id) REFERENCES users (user_id) on DELETE CASCADE)""")
    con.commit()

    cur.execute("SELECT * FROM tables WHERE user_id = '%s'" % (user_id,))
    existing_record = cur.fetchone()

    if not existing_record:
        cur.execute("""INSERT INTO tables(user_id) values(?)""", (user_id,))

    cur.execute("SELECT * FROM tables")
    print(cur.fetchall())

    con.commit()
    con.close()
    if settings is None:
        settings = {"table_name": [],
                    "build_plots": True,
                    }

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    btn2 = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    btn3 = types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    btn4 = types.KeyboardButton("‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    btn5 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4, btn5)

    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ  –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π", reply_markup=markup)

    bot.register_next_step_handler(message, on_click, settings)

# to do: find a way to split this function into small parts


def on_click(message, settings=None):
    user_id = message.from_user.id

    if message.text == "‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üö´ exit")
        markup.add(btn1)
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æc. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", reply_markup=markup)

        bot.register_next_step_handler(message, call_to_model, settings)
    elif message.text == "üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        con = sq.connect("user_data.sql")
        cur = con.cursor()
        cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))
        rows = cur.fetchall()
        con.commit()
        con.close()
        btn = None

        for row in rows:

            if row[0] is not None:

                btn = types.KeyboardButton(row[0])

                markup.add(btn)

        btn1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        btn2 = types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–±–æ—Ä —Ç–∞–±–ª–∏—Ü")
        markup.row(btn1)

        if len(settings["table_name"]) > 0:
            bot.send_message(message.from_user.id, f"–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {settings['table_name']}")
            markup.row(btn2)
        btn3 = types.KeyboardButton("üö´ exit")
        markup.row(btn3)
        bot.send_message(message.from_user.id, "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", reply_markup=markup)
        bot.register_next_step_handler(message, choose_table, settings)

    elif message.text == "üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
        if settings["build_plots"] == False:
            build_plots = "–≤—ã–∫–ª—é—á–µ–Ω"
        else:
            build_plots = "–≤–∫–ª—é—á–µ–Ω"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å")
        btn2 = types.KeyboardButton("–í–∫–ª—é—á–∏—Ç—å")
        markup.row(btn1, btn2)
        bot.send_message(message.from_user.id, f"–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω  {build_plots}  –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                         reply_markup=markup)
        bot.register_next_step_handler(message, plots_handler, settings)

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        con = sq.connect("user_data.sql")
        cur = con.cursor()
        cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))
        rows = cur.fetchall()
        con.commit()
        existing_record = cur.fetchall()

        btn = None

        for row in rows:

            if row[0] is not None:
                btn = types.KeyboardButton(row[0])

                markup.add(btn)
        con.close()

        btn1 = types.KeyboardButton("üö´ exit")
        markup.add(btn1)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                         reply_markup=markup)
        bot.register_next_step_handler(message, table_description, settings)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        con = sq.connect("user_data.sql")
        cur = con.cursor()
        cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))
        rows = cur.fetchall()
        con.commit()
        existing_record = cur.fetchall()

        btn = None

        for row in rows:

            if row[0] is not None:
                btn = types.KeyboardButton(row[0])

                markup.add(btn)
        con.close()

        btn1 = types.KeyboardButton("üö´ exit")
        markup.add(btn1)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                         reply_markup=markup)
        bot.register_next_step_handler(message, choose_table_context, settings)
        

def choose_table_context(message, settings=None):
    if message.text == "üö´ exit":
        main(message, settings)
    else:
        table_name = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üö´ exit")

        markup.row(btn1)
        bot.send_message(message.from_user.id, f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –≤—ã–±—Ä–∞–Ω–∞, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt –∏–ª–∏ msg", reply_markup=markup)
        bot.register_next_step_handler(message, add_context, settings, table_name)


def add_context(message, settings=None, table_name=None):
    if message.text == "üö´ exit":
        main(message, settings)

    else:
        try:
            table_name = table_name
            user_id = message.from_user.id
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üö´ exit")
            markup.add(btn1)
            if message.content_type == "text":
                context = str(message.text)

                con = sq.connect("user_data.sql")
                cur = con.cursor()
                cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))

                existing_record = cur.fetchall()
                if existing_record:
                    cur.execute(
                        """UPDATE tables SET context = '%s' WHERE table_name = '%s' and user_id = '%s' """ % (
                        context, table_name, user_id))

                con.commit()
                con.close()
                bot.send_message(message.from_user.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=markup)
                bot.register_next_step_handler(message, main, settings)
            elif message.content_type == "document":
                file_id = message.document.file_id
                file_info = bot.get_file(file_id)
                file_path = file_info.file_path

                downloaded_file = bot.download_file(file_path)
                src = "data/" + message.document.file_name
                if ".msg" in src:
                    with open(src, 'wb') as f:
                        f.write(downloaded_file)
                    context = msg_to_string(src)
                else:
                    context = downloaded_file.decode('utf-8')

                con = sq.connect("user_data.sql")
                cur = con.cursor()

                cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))

                existing_record = cur.fetchall()
                if existing_record:
                    cur.execute("""UPDATE tables SET context = '%s' WHERE table_name = '%s' """ % (
                    context, table_name))
                con.commit()
                con.close()
                bot.send_message(message.from_user.id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', reply_markup=markup)
                bot.register_next_step_handler(message, main, settings)

        except Exception:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
            error_message_flag = True
            choose_table(message, settings, error_message_flag)


def choose_table(message, settings=None, error_table_flag=False):
    if message.text == "üö´ exit":
        main(message, settings)
    elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–±–æ—Ä —Ç–∞–±–ª–∏—Ü":
        settings["table_name"] = []
        main(message, settings)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É" or error_table_flag:
        markup = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton("üö´ exit")
        markup.row(btn1)
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv, XLSX –∏–ª–∏ json", reply_markup=markup)
        bot.register_next_step_handler(message, add_table, settings)

    else:
        if message.text in settings["table_name"]:
            bot.send_message(message.from_user.id, "–î–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞–±–æ—Ä–µ")
            main(message, settings)
        else:
            settings["table_name"].append(message.text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        btn1 = types.KeyboardButton("üö´ exit")
        markup.row(btn1)

        bot.send_message(message.from_user.id, "–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–∂–º–∏—Ç–µ 'exit', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞", reply_markup=markup)

        bot.register_next_step_handler(message, call_to_model, settings)


def add_table(message, settings=None, error_message_flag=False):
    if message.text == "üö´ exit":
        main(message, settings)

    else:
        try:
            user_id = message.from_user.id
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path

            downloaded_file = bot.download_file(file_path)
            src = "data/" + message.document.file_name

            with open(src, 'wb') as f:
                f.write(downloaded_file)

            con = sq.connect("user_data.sql")
            cur = con.cursor()
            cur.execute("""SELECT * FROM tables WHERE table_name = (?) and user_id = (?)""", (message.document.file_name,user_id))
            existing_record = cur.fetchall()
            print("this:", existing_record)
            if not existing_record:
                cur.execute("""INSERT INTO tables(user_id, table_name) VALUES(?,?)""", (user_id, message.document.file_name))

            con.commit()
            con.close()
            bot.reply_to(message, '–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
            settings["table_name"].append(message.document.file_name)
            bot.register_next_step_handler(message, main, settings)
        except Exception:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
            error_message_flag = True
            choose_table(message, settings, error_message_flag)
# function that contains all params that was set by user and will be used during interaction with model


def plots_handler(message, settings=None):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1)

    if message.text == "–í—ã–∫–ª—é—á–∏—Ç—å":
        settings["build_plots"] = False
        bot.send_message(message.from_user.id, "–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω", reply_markup=markup)
        bot.register_next_step_handler(message, main, settings)
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å":
        settings["build_plots"] = True
        bot.send_message(message.from_user.id, "–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á—ë–Ω", reply_markup=markup)
        bot.register_next_step_handler(message, main, settings)


def table_description(message, settings=None):
    table_name = message.text
    if message.text == "üö´ exit":
        main(message, settings)
    else:

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üö´ exit")
        markup.add(btn1)
        bot.send_message(message.from_user.id,
                         "–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                         reply_markup=markup)
        bot.register_next_step_handler(message, choose_description, settings, table_name)


def choose_description(message, settings=None, table_name=None):
    table_name = table_name
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üö´ exit")
    markup.add(btn1)
    if message.content_type == "text":
        description = str(message.text)
        print(description)
        con = sq.connect("user_data.sql")
        cur = con.cursor()
        cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))

        existing_record = cur.fetchall()
        if existing_record:
            cur.execute("""UPDATE tables SET table_description = '%s' WHERE table_name = '%s' and user_id = '%s' """ % (description, table_name, user_id))

        con.commit()
        con.close()
        bot.send_message(message.from_user.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=markup)
        bot.register_next_step_handler(message, main, settings)
    elif message.content_type == "document":
        try:
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path

            downloaded_file = bot.download_file(file_path)
            src = "data/" + message.document.file_name

            description = downloaded_file.decode('utf-8')

            con = sq.connect("user_data.sql")
            cur = con.cursor()

            cur.execute("select table_name from tables where user_id == '%s'" % (user_id,))

            existing_record = cur.fetchall()
            if existing_record:
                cur.execute("""UPDATE tables SET table_description = '%s' WHERE table_name = '%s' """ % (description, table_name))
            con.commit()
            con.close()
            bot.send_message(message.from_user.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=markup)
            bot.register_next_step_handler(message, main, settings)

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
            error_message_flag = True
            bot.register_next_step_handler(message, table_description, settings)


# to do: there should be some ways to optimize interaction with database

def call_to_model(message, settings=None):

    def callback(sum_on_step):
        message_id = send_message.message_id

        edited_message = bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=send_message.text + f"\n{sum_on_step}")

    chat_id = message.chat.id
    user_question = message.text
    table_name = settings["table_name"]
    context_line = ""
    table_description_line = ""

    if message.text == "üö´ exit":
        main(message, settings)
    else:
        try:
            if settings["table_name"] is None:
                bot.send_message(message.from_user.id, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é")
                bot.register_next_step_handler(message, main, settings)
                markup = types.ReplyKeyboardMarkup()
                btn1 = types.KeyboardButton("üö´ exit")
                markup.add(btn1)
                bot.send_message(message.from_user.id,
                             "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                             reply_markup=markup)
            else:
                table_name_path = table_name.copy()
                for table in range(len(table_name_path)):
                    table_name_path[table] = "data/" + table_name_path[table]
                con = sq.connect("user_data.sql")
                for table in table_name:
                    user_id = message.from_user.id


                    cur = con.cursor()
                    cur.execute("SELECT * FROM tables WHERE user_id = '%s' AND table_name = '%s'" % (user_id, table))
                    existing_record = cur.fetchone()

                    if existing_record:

                        cur.execute("SELECT table_description FROM tables WHERE user_id = '%s' AND table_name = '%s'" % (user_id, table))
                        table_description = cur.fetchone()

                        if not table_description or table_description[0] is None:
                            table_description_line = table + " "
                        else:
                            table_description_line = table + table_description[0]

                    con.commit()

                    cur.execute("SELECT context FROM tables WHERE user_id = '%s' AND table_name = '%s'" % (user_id, table))
                    context = cur.fetchone()

                    if not context or context[0] is None:
                        context_line += table + " "
                    else:
                        context_line += table + context[0]
                print(context_line)
                print(table_description_line)
                cur = con.cursor()

                cur.execute("SELECT conv_sum FROM users WHERE user_id = '%s'" % (user_id,))
                current_summary = cur.fetchone()

                if not current_summary or current_summary[0] is None:
                    current_summary = ""
                else:
                    current_summary = current_summary[0]



                print(settings)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton("üö´ exit")

                markup.add(btn1)

                bot.send_message(message.from_user.id,
                                 "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                                 reply_markup=markup)
                send_message = bot.send_message(message.from_user.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π:")

                build_plots = settings["build_plots"]
                answer_from_model = interactor.run_loop_bot(table_name_path, build_plots, user_question, current_summary,
                                                            table_description_line, context_line, callback=callback)
                summary = answer_from_model[1]
                new_summary = current_summary + summary

                cur.execute("INSERT OR REPLACE INTO users VALUES(?, ?)", (user_id, new_summary))

                cur.execute("select * from users")
                #print(cur.fetchall())
                con.commit()
                con.close()

                time.sleep(10)
                pattern = r"\b\w+\.png\b"
                if ".png" in answer_from_model[1]:

                    plot_files = re.findall(pattern, answer_from_model[1])
                    for plot_file in plot_files:
                        path_to_file = "Plots/" + plot_file

                        if os.path.exists(path_to_file):
                            bot.send_photo(message.from_user.id, open(path_to_file, "rb"))
                    for plot_file in plot_files:

                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            os.remove(path_to_file)
                    matplotlib.pyplot.close("all")
                    bot.send_message(message.from_user.id, f"Answer: {answer_from_model[0]}")
                else:
                    bot.send_message(message.from_user.id, f"Answer: {answer_from_model[0]}")
                bot.register_next_step_handler(message, call_to_model, settings)
        except requests.exceptions.ConnectionError:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            main(user_question, settings)


#try:
    #bot.polling()
#except Exception as e:
    #print("error is:", e)
    #time.sleep(2)
bot.polling()