import asyncio
import os
import sys
import time
import requests
import logging
import traceback
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import markdown

import interactor
import matplotlib
import re

import config


logging.basicConfig(level=logging.INFO)

if len(sys.argv) > 1:
    API_TOKEN = config.read_config(sys.argv[1])["bot_api"]
    config.config = config.read_config(sys.argv[1])
else:
    API_TOKEN = config.config["bot_api"]

import bot_data_handler
import inline_keyboard_manager
import db_manager

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    table_name = State()  
    description = State()
    context = State()
    request = State()
    question = State()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):

    first_time = await bot_data_handler.make_insertion(message.chat.id)

    if first_time:

        await help_info(message)
    text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"), 
        types.KeyboardButton("üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"),
    )
    markup.add(
        types.KeyboardButton("‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        types.KeyboardButton("–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü")  
    )

    await message.reply(text, reply_markup=markup)


@dp.message_handler(commands=['help'])
async def help_info(message: types.Message):
    await message.reply("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è""")
    
    help_text = """
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –¢–∞–±–ª–∏—Ü—É' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ –Ω—É–∂–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü"""

    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN)
    
    example = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'"
    await message.reply(example)
    
    instructions = """
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:
1) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π
2) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞
4) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await message.reply(instructions)
    
    trouble = "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É 'start'"
    await message.reply(trouble)


@dp.message_handler(Text(equals="üñπ –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"))
async def select_table(message: types.Message, state: FSMContext):
    await Form.table_name.set()
    markup = await create_inline_keyboard(message.chat.id, "table_page")
    await message.reply("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", reply_markup=markup)
    await send_welcome(message)


@dp.callback_query_handler(Text(startswith="t|"), state=Form.table_name)
async def choose_table(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id

    if action == "new_table":
        await call.message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv, XLSX –∏–ª–∏ json")
        await Form.table_name.set()

    elif action == "delete_tables":
        tables = await bot_data_handler.delete_last_table(call.message.chat.id)
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {tables[-1]} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")

    elif action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id,)
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="table_page")
        new_page = page
        if page < amount:
            if action == "right":
                new_page = page + 1
            elif page > 1:
                new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "table_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id,"table_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)

    else:
        await choose_table(call.data, call.message)
        await call.message.answer("–¢–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞")


    await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['document'], state=Form.table_name)
async def load_table(message: types.Message, state: FSMContext):
    await db_manager.add_table_db(message)
    await message.reply("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await state.finish()


@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"))
async def add_description(message: types.Message, state: FSMContext):
    await Form.description.set()

    markup = await create_inline_keyboard(message.chat.id, "context_page")

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)
    await send_welcome(message)


@dp.callback_query_handler(Text(startswith="c|"), state=Form.context)
async def choose_context(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id

    if action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id,)
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="context_page")
        new_page = page
        if page < amount:
            if action == "right":
                new_page = page + 1
            elif page > 1:
                new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "context_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id, "context_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)

    elif action == "exit":
        await call.message.delete()
        await state.finish()

    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt")
        await Form.next()
        await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['text', 'document'], state=Form.context)
async def save_context(message: types.Message, state: FSMContext):
    table_name = message.text
    await db_manager.add_context(message, table_name)
    await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await state.finish()


@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"))
async def add_description(message: types.Message, state: FSMContext):
    await Form.description.set()
    markup = await create_inline_keyboard(message.chat.id, "description_page")
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=markup)



@dp.callback_query_handler(Text(startswith="d|"), state=Form.description)
async def choose_description(call: types.CallbackQuery):
    action = call.data.split("|")[1]
    chat_id = call.message.chat.id
    if action in ("right", "left"):
        amount = await inline_keyboard_manager.get_pages_amount(chat_id=chat_id, )
        page = await inline_keyboard_manager.get_page(chat_id=chat_id, page_type="description_page")
        new_page = page
        if page < amount:
            if action == "right":
                new_page = page + 1
            elif page > 1:
                new_page = page - 1

        await inline_keyboard_manager.change_page(call.message.chat.id, "description_page", new_page=new_page)
        markup = await create_inline_keyboard(call.message.chat.id, "description_page", new_page)
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é",
                                     reply_markup=markup)


    elif action == "exit":
        await call.message.delete()
        #await state.finish()

    else:
        await call.message.answer(f"–¢–∞–±–ª–∏—Ü–∞ {action} –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt")
        await Form.next()
        await bot.answer_callback_query(call.id)


@dp.message_handler(content_types=['text', 'document'], state=Form.description)
async def save_description(message: types.Message, state: FSMContext):
    table_name = message.text
    await db_manager.choose_description_db(message, table_name)
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await state.finish()


@dp.message_handler(Text(equals="üñª –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"))
async def toggle_plots(message: types.Message, state: FSMContext):
    text = await bot_data_handler.set_plots(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.reply(text, reply_markup=markup)
    await send_welcome(message)


@dp.message_handler(Text(equals="‚ùì –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"))
async def request_mode(message: types.Message, state: FSMContext):
    #await call_to_model(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üö´ exit"))
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Äo—Å. –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è",
                        reply_markup=markup)
    await Form.question.set()


@dp.message_handler(Text(equals="–ì—Ä—É–ø–ø—ã —Ç–∞–±–ª–∏—Ü"))
async def group_options(message: types.Message, state: FSMContext):
    markup = await inline_keyboard_manager.create_group_keyboard(message.chat.id)
    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é", reply_markup=markup)
    await send_welcome(message)


@dp.message_handler()
async def create_inline_keyboard(chat_id, page_type, page=1, group_mode=False):

    keyboard_types = ["table_page", "description_page", "context_page"]

    if page_type not in keyboard_types:
        raise ValueError("Invalid page type")

    return await inline_keyboard_manager.inline_keyboard(chat_id=chat_id, page_type=page_type, page=page,
                                                         status_flag=False)


@dp.message_handler(state=Form.question)
async def call_to_model(message: types.Message, state: FSMContext):
    demo_status = await db_manager.check_for_demo(chat_id=message.chat.id)
    if demo_status is not None:
        pass
    if message.text == "üö´ exit":

        await bot_data_handler.exit_from_model(message.chat.id)

        await state.finish()
        await send_welcome()

    elif message.text == "–ù–µ—Ç":
        await send_welcome(message)

    else:
        if message.text == "–î–∞":
            user_question = "–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–±–ª–∏—Ü–µ"
        else:
            user_question = message.text
        chat_id = message.chat.id

        def callback(sum_on_step):
            message_id = send_message.message_id
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=send_message.text + f"\n{sum_on_step}")
        settings = await db_manager.get_settings(chat_id)
        try:
            if settings["table_name"] is None or settings["table_name"] == "":
                await message.answer("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ")
                markup = types.ReplyKeyboardMarkup()
                btn1 = types.KeyboardButton("üö´ exit")
                markup.add(btn1)
                await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                             reply_markup=markup)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton("üö´ exit")
                markup.add(btn1)
                await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é —Å –ø–æ–º–æ—â—å—é 'exit'",
                                 reply_markup=markup)
                await message.answer("–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Å–ø–∞—Å–∏–±–æ")
                send_message = await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π:")
                answer_from_model = await bot_data_handler.model_call(chat_id=chat_id, user_question=user_question,callback=callback)
                if answer_from_model[0] == "F":
                    await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å")
                    answer_from_model = await bot_data_handler.model_call(chat_id=chat_id, user_question=user_question,
                                                   callback=callback)
                    if answer_from_model[0] == "F":
                        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                current_summary = await bot_data_handler.get_summary(chat_id)
                summary = answer_from_model[1]
                await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
                new_summary = current_summary + summary
                print(summary)
                await db_manager.update_summary(chat_id, new_summary)
                time.sleep(10)
                pattern = r"\b\w+\.png\b"
                pattern2 = r"[\w.-]+\.png"
                if ".png" in answer_from_model[1]:
                    plot_files = re.findall(pattern, answer_from_model[1])
                    plot_files_2 = re.findall(pattern2, answer_from_model[1])
                    print("plot_files", plot_files, plot_files_2)
                    for plot_file in plot_files:
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            await message.answer_photo(open(path_to_file, "rb"))
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            os.remove(path_to_file)
                    for plot_file in plot_files_2:
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file) and path_to_file not in plot_files:
                            await message.answer_photo(open(path_to_file, "rb"))
                        path_to_file = "Plots/" + plot_file
                        if os.path.exists(path_to_file):
                            os.remove(path_to_file)
                    matplotlib.pyplot.close("all")
                    await message.answer(f"Answer: {answer_from_model[0]}")
                else:
                    await message.answer(f"Answer: {answer_from_model[0]}")
                #bot.register_next_step_handler(message, call_to_model)
        except requests.exceptions.ConnectionError:
            await call_to_model(message)
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É start")


            #await message.reply(f"–û—Ç–≤–µ—Ç: {answer}")
            #await bot_data_handler.update_summary(message.chat.id, new_summary)

            #await Form.request.set()


async def main():
    # Your code to start the bot, setup handlers, etc.
    await dp.start_polling()

if __name__ == "__main__":
    # Run the main function inside the asyncio event loop
    asyncio.run(main())
